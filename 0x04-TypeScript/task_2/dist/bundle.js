!function(o){var e={};function t(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return o[n].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=o,t.c=e,t.d=function(o,e,n){t.o(o,e)||Object.defineProperty(o,e,{enumerable:!0,get:n})},t.r=function(o){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(o,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(o,"__esModule",{value:!0})},t.t=function(o,e){if(1&e&&(o=t(o)),8&e)return o;if(4&e&&"object"==typeof o&&o&&o.__esModule)return o;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:o}),2&e&&"string"!=typeof o)for(var r in o)t.d(n,r,function(e){return o[e]}.bind(null,r));return n},t.n=function(o){var e=o&&o.__esModule?function(){return o.default}:function(){return o};return t.d(e,"a",e),e},t.o=function(o,e){return Object.prototype.hasOwnProperty.call(o,e)},t.p="",t(t.s=0)}([function(o,e){var t=function(){function o(){}return o.prototype.workFromHome=function(){return"Working from home"},o.prototype.getCoffeeBreak=function(){return"Getting a coffee break"},o.prototype.workDirectorTasks=function(){return"Getting to director tasks"},o}(),n=function(){function o(){}return o.prototype.workFromHome=function(){return"Cannot work from home"},o.prototype.getCoffeeBreak=function(){return"Cannot have a break"},o.prototype.workTeacherTasks=function(){return"Getting to work"},o}();function r(o){return"number"==typeof o&&o<500?new n:new t}function u(o){return o instanceof t?o.workDirectorTasks():o instanceof n?o.workTeacherTasks():void 0}function c(o){return"Math"===o?"Teaching Math":"History"===o?"Teaching History":"Not teaching any subject"}var i=r(400);console.log(i.workFromHome());var f=r(600);console.log(f.workFromHome());var a=new t,l=new n;console.log(u(a)),console.log(u(l));console.log(c("Math")),console.log(c("History")),console.log(r("$500")),console.log(r(1e3)),console.log(r(200))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,